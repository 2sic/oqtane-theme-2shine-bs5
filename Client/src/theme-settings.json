{
  /* This file contains configuration for the menus in the layout. 
   * It allows you to make most changes to menus without recompiling the source code, 
   * thereby letting designers quickly build their theme
   * It has three sections:
   * - Version is simply a version number, to better control when the code expects a different structure
   * - Menus which uses a string-key to identify a configuration, and determins which pages should be shown
   * - Designs uses a string key as well, and determines look and feel through CSS-Classes added to the HTML
   *
   * Note: This is a JSON file but the parser will treat it as JSONC, so you can add comments
  */
  // ********************
  // The version of this file, which helps the reader detect the format (or error if incompatible)
  "version": 0.01,
  // ********************
  // Layouts Configurations. In most cases you'll just use "Default"
  // The example below shows how the "Sidebar" configuration switches to a different menu
  "Layouts": {
    "Default": {
      // Design Names with "=" mean they inherit / use the name already existing - in this case "Default"
      "containerDesign": "=",
      "logo": "[Theme.Url]/Assets/logo.svg",
      "languages": "=",
      // very optional, just as example. will default to "=" meaning "Default"
      // "languageMenuDesign": "custom-lang-design",
      "languageMenuShow": true,
      "languageMenuShowMin": 2,
      // Determins if we should use the body (or a div) for the magic context
      // As of now we feel that browser behavior is better if it's in the div-tag (false)
      "magicContextInBody": false
      // "breadcrumbs": "=",         // Breadcrumb-config inherits name, so also "Default" - this is the default BTW
    },
    // Layout showing the submenu in the sidebar, so we don't need to show more items in the main menu
    "Sidebar": {
      "menus": {
        "Main": "ToplevelOnly"
      }
    }
  },
  "PageDesigns": {
    "Default": {
      "MagicClasses": [
        "page-[Page.Id]",
        "page-root-[Page.RootId]",
        "page-parent-[Page.ParentId]",
        "site-[Site.Id]",
        "nav-level-[Menu.Level]",
        "to-shine-variation-[Layout.Variation]"
      ],
      "PageIsHome": "page-is-home",
      "PaneIsEmpty": "pane-is-empty",
      "MagicContextTagId": "cre8magic-root"
    }
  },
  "Breadcrumbs": {
    "Default": {
      "separator": "&nbsp;&rsaquo;&nbsp;", // a non-breaking space + >> + non-breaking space
      "revealer": "â€¦" // this is an Ellipsis character
    }
  },
  // ********************
  // Languages Configurations
  "Languages": {
    "Default": {
      "hideOthers": false,
      // TODO: PROBABLY change to "Values"
      "Languages": {
        "en": {
          "label": "ENG",
          "description": "English (from JSON config)"
        },
        "de-CH": {
          "label": "DEU"
        }
      }
    }
  },
  // ********************
  // Menus contain the configuration for each menu. The names used are specified in the Razor files.
  "Menus": {
    // The default configuration is taken if no other configuration is used
    "Default": {
      "start": "*",
      "depth": 0
    },
    // This is used as the main-menu in the navigation with sidebar submenu
    "ToplevelOnly": {
      "start": "*",
      "depth": 0
    },
    // Main is usually used for the default, top-level menu
    "Main": {
      "start": "*",
      "depth": 2
    },
    // Mobile is usually used for the default, top-level menu which only appears when the screen is too small
    "Mobile": {
      "start": "*",
      "depth": 2
    },
    // Sidebar is used in menus usually to the left of content
    "Sidebar": {
      "start": ".",
      "level": 1,
      "children": true,
      "depth": 2,
      "design": "Sidebar"
    },
    // Footer menu, would usually show Imprint, Terms, Privacy etc.
    // For the default values we're using Home "1" and Login (forced, even though it's set to not show in menus) "5!" as these are a few of the pages which always exist
    "Footer": {
      "start": "1, 5!"
    }
  },
  // ********************
  // Language Designs add classes for the language menus
  "LanguageDesigns": {
    "Default": {
      "ul": {
        "classes": "to-shine-page-language"
      },
      "li": {
        "isActive": "active"
      }
    }
    // Example of design specs with another name
    // "custom-lang-design": {
    //     "ul": { "classes": "to-shine-page-language custom" },
    //     "li": { "isActive": "active custom", "isNotActive": "inactive custom" }
    // }
  },
  // ********************
  // Containers has properties / settings / values on containers which are not directly related to design
  "Containers": {
    "Default": {
      "Values": {
        "id": "module-[Module.Id]"
      }
    }
  },
  // ********************
  // Container Designs determine CSS classes on containers
  "ContainerDesigns": {
    "Default": {
      "div": {
        "classes": "to-shine-background-container py-4 test-[Module.Id] test-[Page.Id]",
        // "isPublished": "module-published",
        "isNotPublished": "module-unpublished",
        "isAdminModule": "to-shine-admin-container"
        // "isNotAdminModule": "to-shine-default-container"
      }
    }
  },
  // ********************
  // MenuDesigns specify how the output is made, what classes added to each node etc.
  // It's separate from the Menus, since it could be re-used
  // It also supports two special placeholders [Page.Id] and [Menu.Id]
  "MenuDesigns": {
    // The default menu styling used for main and most menus
    // (unless specified otherwise)
    "Default": {
      "ul": {
        "byLevel": {
          "0": "navbar-nav test-[Page.Id] test-[Theme.Path]",
          "-1": "dropdown-menu"
        }
      },
      "li": {
        "classes": "nav-item nav-[Page.Id]",
        "hasChildren": "has-child dropdown",
        // "hasNoChildren": "example",
        "isActive": "active",
        // "isNotActive": "example",
        "isDisabled": "disabled"
        //"isNotDisabled": "example",
      },
      "a": {
        "isActive": "active",
        "hasChildren": "dropdown-toggle",
        "byLevel": {
          "1": "nav-link",
          "-1": "dropdown-item"
        }
      }
    },
    "Mobile": {
      "ul": {
        "byLevel": {
          "0": "navbar-nav",
          "-1": "collapse to-shine-submenu-[Menu.Id]-[Page.Id]"
        },
        "isInBreadcrumb": "show"
      },
      "li": {
        "classes": "nav-item nav-[Page.Id] position-relative",
        "hasChildren": "has-child",
        "isActive": "active",
        "isDisabled": "disabled"
      },
      "a": {
        // NOTE: ATM this is the only difference to Sidebar
        "classes": "nav-link mobile-navigation-link",
        "isActive": "active"
      },
      "span": {
        "classes": "nav-item-sub-opener",
        "isNotInBreadcrumb": "collapsed"
      },
      // Special target information (not really styling) usually on the span-tag
      "data-bs-target": {
        "value": ".to-shine-submenu-[Menu.Id]-[Page.Id]"
      }
    },
    "Sidebar": {
      "ul": {
        "byLevel": {
          "0": "navbar-nav",
          "-1": "collapse to-shine-submenu-[Menu.Id]-[Page.Id]"
        },
        "isInBreadcrumb": "show"
      },
      "li": {
        "classes": "nav-item nav-[Page.Id] position-relative",
        "hasChildren": "has-child",
        "isActive": "active",
        "isDisabled": "disabled"
      },
      "a": {
        "classes": "nav-link",
        "isActive": "active"
      },
      "span": {
        "classes": "nav-item-sub-opener",
        "isNotInBreadcrumb": "collapsed"
      },
      "data-bs-target": {
        "value": ".to-shine-submenu-[Menu.Id]-[Page.Id]"
      }
    },
    "Footer": {
      "ul": {
        "classes": "navbar-nav test-wip-config"
      }
    }
  }
}